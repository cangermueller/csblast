# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR = ../../../lib/gtest

# Where to find user code.
USER_DIR = .

# Compiler to use
CXX = g++

# Maximal log-level
LOG_MAX_LEVEL = 0

# Flags passed to the preprocessor
CPPFLAGS += -I$(GTEST_DIR) -I$(GTEST_DIR)/include -I$(USER_DIR) -DLOG_MAX_LEVEL=$(LOG_MAX_LEVEL)

# Flags passed to the C++ compiler.
CXXFLAGS += -g -O3 -W -Wall -Wno-char-subscripts -fno-strict-aliasing

# Flags passed to the C++ compiler for Google Test compilation
GTEST_CXXFLAGS += -g

# All non-test executables produced by this Makefile
TARGETS = test

# Libraries against which TARGETS should be build
LIBS = 

# File extension of C++ files
EXT = cc

# Directory to which object files should be written
BUILDDIR = build

# C++ source files
SOURCES = $(wildcard *.$(EXT))
OBJECTS = $(patsubst %.$(EXT), $(BUILDDIR)/%.o, $(SOURCES))
DEPS    = $(patsubst %.$(EXT), $(BUILDDIR)/%.dep, $(SOURCES))

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# House-keeping build targets.

all : $(TARGETS) 

clean :
	rm -rf $(BUILDDIR) $(TARGETS) gtest.a gtest_main.a *.o

.PHONY: all clean

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
$(BUILDDIR)/gtest-all.o : $(GTEST_SRCS_) $(BUILDDIR)/.tag
	$(CXX) $(CPPFLAGS) $(GTEST_CXXFLAGS) -c $(GTEST_DIR)/src/gtest-all.cc -o $@

$(BUILDDIR)/gtest_main.o : $(GTEST_SRCS_) $(BUILDDIR)/.tag
	$(CXX) $(CPPFLAGS) $(GTEST_CXXFLAGS) -c $(GTEST_DIR)/src/gtest_main.cc -o $@

gtest.a : $(BUILDDIR)/gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gtest_main.a : $(BUILDDIR)/gtest-all.o $(BUILDDIR)/gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

# Automatic build rules for object files
$(OBJECTS): $(BUILDDIR)/%.o: %.$(EXT) $(BUILDDIR)/%.dep $(BUILDDIR)/.tag $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $< -o $@

$(DEPS): $(BUILDDIR)/%.dep: %.$(EXT) $(BUILDDIR)/.tag
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -MM $< -MT $@ -MT $(<:.$(EXT)=.o) -o $@

%.tag:
	mkdir -p $(dir $(@))
	touch $@

# Test target: A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.
test : $(OBJECTS) $(DEPS) gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -o $@ $(OBJECTS) gtest_main.a

# Executable targets:
# xxx: $(OBJECTS) $(DEPS)
# 	$(CXX) $(CXXFLAGS) -o $@ $(OBJECTS) $(LIBS)
