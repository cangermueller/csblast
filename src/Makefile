# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# All non-test executables produced by this Makefile
TARGETS = test cstrain_aa cstrain_nt csbuild_aa csbuild_nt

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR = ../lib/gtest

# Where to find user code.
USER_DIR = .

# Compiler to use
ifdef USE_ICC
	CXX = env LANG=C OMPI_CXX=icc
	OPENMP_FLAG = -openmp
else
	CXX =
	OPENMP_FLAG = -fopenmp
endif
ifdef PARALLEL
	CXX += mpic++
else ifdef USE_ICC
	CXX += icc
else
	CXX += ccache g++
endif

# Maximal log-level
LOG_MAX_LEVEL = 0

# Compile for 64bit by default
ifndef BITS
	BITS = 64
endif

# Flags passed to the preprocessor
CPPFLAGS += -I$(GTEST_DIR) -I$(GTEST_DIR)/include -I$(USER_DIR) -I/usr/include \
-DLOG_MAX_LEVEL=$(LOG_MAX_LEVEL) -DGTEST_USE_OWN_TR1_TUPLE=1 -DGTEST_HAS_PTHREAD=0 \
 -fomit-frame-pointer -fno-stack-protector -m$(BITS)

# Flags passed to the C++ compiler.
ifdef USE_ICC
	CXXFLAGS += -O3 -ipo -ftz -fp-model fast=2 -fast-transcendentals \
-no-prec-sqrt -Wall -wd981 -wd383 -wd2259 -wd1572 -wd10006 -wd161 -wd1418 -Wno-deprecated
else
	CXXFLAGS += -O3 -ffast-math -ftree-vectorize -msse2 \
-funsafe-math-optimizations --param large-function-growth=10000 \
--param inline-unit-growth=10000 --param max-inline-insns-single=10000 \
-W -Wall -Wno-char-subscripts -fno-strict-aliasing -Wno-deprecated
endif
ifdef STATIC
	CXXFLAGS += -static
endif

ifdef OPENMP
	CXXFLAGS += -DOPENMP $(OPENMP_FLAG)
endif
ifdef PARALLEL
	CXXFLAGS += -DPARALLEL
endif
ifdef GPROF
	CXXFLAGS += -g -pg -fno-omit-frame-pointer -fno-inline-functions -DNDEBUG
endif
ifndef NDEBUG
	CXXFLAGS += -g
else
	CXXFLAGS += -DNDEBUG
endif
ifdef LOGGING
	CXXFLAGS += -DLOGGING
endif

# Flags passed to the C++ compiler for Google Test compilation
GTEST_CXXFLAGS += -g

# Libraries against which TARGETS should be build
LIBS = -lm

# File extension of C++ files
EXT = cc

# Directory to which object files should be written
BUILDDIR = build

# C++ source files
#SOURCES = $(wildcard *.$(EXT))
SOURCES_WITH_APP = $(filter-out $(patsubst %, %.$(EXT), $(TARGETS)), \
$(wildcard *.$(EXT)))
SOURCES = $(filter-out csalign.cc $(wildcard *_app.$(EXT)),  $(SOURCES_WITH_APP))
OBJECTS = $(patsubst %.$(EXT), $(BUILDDIR)/%.o, $(SOURCES))
DEPS    = $(patsubst %.$(EXT), $(BUILDDIR)/%.dep, $(SOURCES))
OBJECTS_NO_TESTS = $(filter-out $(patsubst %.$(EXT), $(BUILDDIR)/%.o, \
$(wildcard *test*.$(EXT))), $(OBJECTS))
DEPS_NO_TESTS    = $(filter-out $(patsubst %.$(EXT), $(BUILDDIR)/%.dep, \
$(wildcard *test*.$(EXT))), $(DEPS))

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# House-keeping build targets.

all : $(TARGETS) csblast csprobs cstrainset cshmc csclust cstranslate csmakemat csviz cslast

clean :
	rm -rf $(BUILDDIR) $(TARGETS) csblast csprobs cstrainset cshmc cstranslate csmakemat cviz cslast gtest.a \
gtest_main.a *.o cstest

.PHONY: all clean

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
$(BUILDDIR)/gtest-all.o : $(GTEST_SRCS_) $(BUILDDIR)/.tag
	$(CXX) $(CPPFLAGS) $(GTEST_CXXFLAGS) -c $(GTEST_DIR)/src/gtest-all.cc -o $@

$(BUILDDIR)/gtest_main.o : $(GTEST_SRCS_) $(BUILDDIR)/.tag
	$(CXX) $(CPPFLAGS) $(GTEST_CXXFLAGS) -c $(GTEST_DIR)/src/gtest_main.cc -o $@

# gtest.a : $(BUILDDIR)/gtest-all.o
# 	$(AR) $(ARFLAGS) $@ $^

gtest_main.a : $(BUILDDIR)/gtest-all.o $(BUILDDIR)/gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

# Automatic build rules for object files
$(OBJECTS): $(BUILDDIR)/%.o: %.$(EXT) $(BUILDDIR)/%.dep $(BUILDDIR)/.tag \
$(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $< -o $@

$(DEPS): $(BUILDDIR)/%.dep: %.$(EXT) $(BUILDDIR)/.tag
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -MM $< -MT $@ -MT $(<:.$(EXT)=.o) -o $@

%.tag:
	mkdir -p $(dir $(@))
	touch $@

# Test target: A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.
test: $(OBJECTS) $(DEPS) gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -o $@ $(OBJECTS) gtest_main.a $(LIBS)


# Executable targets:
cstrainset: cstrainset_app.cc $(OBJECTS_NO_TESTS) $(DEPS_NO_TESTS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -o $@ cstrainset_app.cc $(OBJECTS_NO_TESTS) $(LIBS)

csclust: csclust_app.cc $(OBJECTS_NO_TESTS) $(DEPS_NO_TESTS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -o $@ csclust_app.cc $(OBJECTS_NO_TESTS) $(LIBS)

csbuild: csbuild_app.cc $(OBJECTS_NO_TESTS) $(DEPS_NO_TESTS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -o $@ csbuild_app.cc $(OBJECTS_NO_TESTS) $(LIBS)

cshmc: cshmc_app.cc $(OBJECTS_NO_TESTS) $(DEPS_NO_TESTS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -o $@ cshmc_app.cc $(OBJECTS_NO_TESTS) $(LIBS)

cssgd: cssgd_app.cc $(OBJECTS_NO_TESTS) $(DEPS_NO_TESTS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -o $@ cssgd_app.cc $(OBJECTS_NO_TESTS) $(LIBS)

csblast: csblast_app.cc $(OBJECTS_NO_TESTS) $(DEPS_NO_TESTS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -o $@ csblast_app.cc $(OBJECTS_NO_TESTS) $(LIBS)

cstest: cstest_app.cc $(OBJECTS_NO_TESTS) $(DEPS_NO_TESTS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -o $@ cstest_app.cc $(OBJECTS_NO_TESTS) $(LIBS)

cstranslate: cstranslate_app.cc $(OBJECTS_NO_TESTS) $(DEPS_NO_TESTS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -o $@ cstranslate_app.cc $(OBJECTS_NO_TESTS) $(LIBS)

csmakemat: csmakemat_app.cc $(OBJECTS_NO_TESTS) $(DEPS_NO_TESTS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -o $@ csmakemat_app.cc $(OBJECTS_NO_TESTS) $(LIBS)

csviz: csviz_app.cc $(OBJECTS_NO_TESTS) $(DEPS_NO_TESTS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -o $@ csviz_app.cc $(OBJECTS_NO_TESTS) $(LIBS)

cslast: cslast_app.cc $(OBJECTS_NO_TESTS) $(DEPS_NO_TESTS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -o $@ cslast_app.cc $(OBJECTS_NO_TESTS) $(LIBS)

# cstrain_aa: cstrain_app.cc $(OBJECTS_NO_TESTS) $(DEPS_NO_TESTS)
# 	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -o $@ $@.cc $(OBJECTS_NO_TESTS) $(LIBS)

# cstrain_nt: cstrain_app.cc $(OBJECTS_NO_TESTS) $(DEPS_NO_TESTS)
# 	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -o $@ $@.cc $(OBJECTS_NO_TESTS) $(LIBS)

# csprobs: csprobs_app.cc $(OBJECTS_NO_TESTS) $(DEPS_NO_TESTS)
# 	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -o $@ csprobs_app.cc $(OBJECTS_NO_TESTS) \
# $(LIBS)


