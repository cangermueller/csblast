Todo:
* User-friendly error messages for GetOpt-Exceptions.
* ProgressBar class for use in cstrain and csclust.
* Make BaumWelch and Clustering take pointer to Params instead of reference.
* Add return value to BW::run and Clustering::run (1: converged, 0: not converged)
* Make HMM/ProfileLib arguments to EM methods pointers instead of refs
* Make pseudocount methods return auto_ptr< CountProfile >
* Make Pseudocounts constructor take 'const Admixture*'.
* Add set_defaults method to Params structs.
* Really need directory option in CSTrainApp???
* Make refs in xxx_weights_xxx functions pointers
* Create ContextSpecificPseudocounts class with constructor taking FILE*
* Allow raw sequence for initialization of Sequence from stream.
* remove inline from constructors
* Replace HMM ref with HMM* in initializers
* Rename ProfileLibrary in ContextLibary
* Replace # with // in FASTA alignment reading
* Replace neff vector with neff valarray in CountProfile
* SetDefaults() for BaumWelchOptions instead of setting defaults in constructor
* put "" around -d command line argument in CSBlast
* Fix arguments ref arguments in BaumWelch to pointers
* Addapt EM-clustering to double predision and add pseudocounts to profiles
* Adapt sum-product algorithm to work with sequence data
* Add ANY-column in ContextWeightState
* Replace call to alphabet_size() with static Alphabet.instance().size() and also
  look into moving methods of Alphabet class into AminoAcid/Nucleotide to allow
  for *static* const int size_, any_ etc.

Someday:
* Unified validation "framework" for Option classes
