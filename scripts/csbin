#!/usr/bin/ruby
require 'optparse'
require 'rubygems'
require 'bio'
require 'bioinf'
require 'myconfig'

class CSBin
  def initialize
    @verbose        = true
    @workdir        = './'
    @inglob         = '*.bla'
    @seqfile        = nil
    @tp_relation    = 3 # true positives in same superfamily
    @fp_relation    = 1 # false positives in different fold
    @excl_relation  = 5
    @rocx           = 5
    @name2scopid    = {}
    @name           = ""
    @max_evalue     = nil
    @plots          = [:tpfp, :wtpfp, :rocx, :fdr, :rocx, :pvalue, :evalue]
    @benchfiles     = {
      :tpfp   => 'tpfp.dat',
      :wtpfp  => 'wtpfp.dat',
      :rocx   => 'rocx.dat',
      :pvalue => 'pvalue.dat',
      :evalue => 'evalue.dat',
      :fdr    => 'fdr.dat'
    }
    @rank           = :evalue

    @nbins          = 3000
    @bin_max_evalue = 200
    @bin_min_evalue = -5
    @bin_max_pvalue = 200
    @bin_min_pvalue = 0
    @bin_width      = @rank==:evalue ? (@bin_max_evalue-@bin_min_evalue).to_f/@nbins.to_f : (@bin_max_evalue-@bin_min_pvalue).to_f/@nbins.to_f
    @tp             = []
    @fp             = []
    @uc             = []
    @wtp            = []
    @wfp            = []
    @wuc            = []

    @resfiles       = []            # files matched by input glob
    @neg_tot        = nil           # total number of negatives
    @pos_tot        = nil           # total number of positives
    @fm_size        = Hash.new(0)   # number of members in SCOP family
    @sf_size        = Hash.new(0)   # number of members in SCOP superfamily
    @fd_size        = Hash.new(0)   # number of members in SCOP fold
    @cl_size        = Hash.new(0)   # number of members in SCOP class
    @rocx_scores    = []            # array with rocx scores (one per query)
    @worst_fp       = []            # array with 1000 worst false positives sorted by E-value
    @nworst         = 100000
    @nworst_fam     = 20

    self
  end

  attr_reader :bla

  def options
    OptionParser.new do |o|
      o.set_summary_indent('  ')
      o.banner = "Usage: #{$0} -s seqfile [options]"
      o.define_head( "Evaluate homology detection of BLAST run and write datafiles for plotting.")
      o.separator ""

      o.on("-p", "--plots x,y,z", Array, "List of plots for which datafiles should be generated (default: #{@plots.join(', ')})",
           "tpfp  :  TP versus FP ROC (unweighted)",
           "wtpfp :  TP versus FP ROC (weighted by number of family members)",
           "pvalue:  Real P-value versus reported P-value.",
           "evalue:  Real E-value versus reported E-value.") do |val|
        @plots = val.map {|p| p.to_sym }
      end
      o.on("-i", "--infiles GLOB", "Glob expression matching BLAST resultfiles (default: #{@inglob}).") { |val| @inglob = val }
      o.on("-o", "--outfile FILE", "Output file with statistics.") { |val| @outfile = val }
      o.on("-d", "--directory DIRECTORY", "Working directory for datafiles (default: #{@workdir}).") { |val| @workdir=val }
      o.on("-s", "--seq-file FILE", "Sequence file with sequences and SCOP identifiers in FASTA format.") { |val| @seqfile=val }
      o.on("-n", "--name NAME", "Basename for datafiles (default: #{@name}).") { |val| @name=val }
      o.on("--num-worst NUM", Integer, "Number of worst FP hits to include in statistics for output file (default: #{@nworst})." ) { |val| @nworst = val }
      o.on("--tp-relation RELATION", Integer, "Relation threshold for TP classification (default: #{@tp_relation})." ) { |val| @tp_relation = val }
      o.on("--fp-relation RELATION", Integer, "Relation threshold for FP classification (default: #{@fp_relation})." ) { |val| @fp_relation = val }
      o.on("--excl-relation RELATION", Integer, "Relation threshold for hit exclusion (default: #{@excl_relation})." ) { |val| @excl_relation = val }
      o.on("--rocx FP", Integer, "False positives threshold for ROCX plot (default: #{@rocx})." ) { |val| @rocx = val }
      o.on("--max-evalue EVALUE", Float, "Maximal E-value threshold of hits (default: #{@max_evalue})." ) { |val| @max_evalue = val }
      o.on("--rank-by SIGNIF_SCORE", "Rank hits by P-value or E-value (default: #{@rank})." ) { |val| @rank = val.to_sym }
      o.on("-q", "--quiet", "Turn output off.") { |val| @verbose=false }
      o.on("-h", "--help", "Show this help message.") { puts o; exit }
    end
  end

  def check_args
    errors = []
    errors << "No sequence file given!" if @seqfile.nil?
    unless errors.empty?
      puts errors.join("\n")
      exit 1
    end
  end

  def run(args)
    if args.empty? then puts options; exit end
    options.parse!(args)
    check_args

    @bin_width = @rank==:evalue ? (@bin_max_evalue-@bin_min_evalue).to_f/@nbins.to_f : (@bin_max_pvalue-@bin_min_pvalue).to_f/@nbins.to_f
    @tp = Array.new(@nbins+1, 0.0)
    @fp = Array.new(@nbins+1, 0.0)
    @uc = Array.new(@nbins+1, 0.0)
    @wtp = Array.new(@nbins+1, 0.0)
    @wfp = Array.new(@nbins+1, 0.0)
    @wuc = Array.new(@nbins+1, 0.0)

    @resfiles = Dir.glob(@inglob)
    if @resfiles.empty?
      $stderr.puts "No input files found!"
      exit 0
    end

    process_seqfile
    @db_size = @name2scopid.keys.size
    process
    @pos_tot = @tp.inject(0) {|sum,c| sum+c }
    @neg_tot = @fp.inject(0) {|sum,c| sum+c }

    puts "Writing datafiles..." if @verbose
    write_tpfp_data(false) if @plots.include?(:tpfp)
    write_tpfp_data(true) if @plots.include?(:wtpfp)
    write_fdr_data if @plots.include?(:fdr)
    write_pvalue_data if @plots.include?(:pvalue)
    write_evalue_data if @plots.include?(:evalue)
    write_rocx_data if @plots.include?(:rocx)
    write_worst_false_positives unless @outfile.nil?
  end

  def process_seqfile
    Bio::FlatFile.open(Bio::FastaFormat, @seqfile) do |ff|
      ff.each do |entry|
        if entry.definition =~ /^(\S+)\s+(\S+)/
          sid = Bioinf::SCOP::Identifier.new($2)
          @name2scopid[$1] = sid
          @fm_size[sid.fm] = @fm_size[sid.fm]+1
          @sf_size[sid.sf] = @sf_size[sid.sf]+1
          @fd_size[sid.fd] = @fd_size[sid.fd]+1
          @cl_size[sid.cl] = @cl_size[sid.cl]+1
        end
      end
    end
  end

  def get_total_negatives
    case @fp_relation
      when 0: @db_size*@db_size - @cl_size.keys.inject(0) {|sum,cl| sum + (@cl_size[cl]*@cl_size[cl]) }
      when 1: @db_size*@db_size - @fd_size.keys.inject(0) {|sum,fd| sum + (@fd_size[fd]*@fd_size[fd]) }
      when 2: @db_size*@db_size - @sf_size.keys.inject(0) {|sum,sf| sum + (@sf_size[sf]*@sf_size[sf]) }
    end
  end

  def get_total_positives
    case @tp_relation
      when 1: @cl_size.keys.inject(0) {|sum,cl| sum + (@cl_size[cl]*@cl_size[cl]) }
      when 2: @fd_size.keys.inject(0) {|sum,fd| sum + (@fd_size[fd]*@fd_size[fd]) }
      when 3: @sf_size.keys.inject(0) {|sum,sf| sum + (@sf_size[sf]*@sf_size[sf]) }
      when 4: @fm_size.keys.inject(0) {|sum,fm| sum + (@fm_size[fm]*@fm_size[fm]) }
    end
  end

  def parse_hits(resfile, hits)
    f = File.open(resfile, 'r')
    report = Bioinf::Blast::Report.new(f.read)

    report.each do |h|
      break if !@max_evalue.nil? && h.evalue>@max_evalue
      rel = relation(report.query_id, h.target_id)
      next if  rel>=@excl_relation
      bin = case @rank
            when :evalue then ( ( -log10(h.evalue) - @bin_min_evalue.to_f ) / @bin_width ).to_i
            when :pvalue then ( ( -log10(pvalue(h.evalue, report.db_size)) - @bin_min_pvalue.to_f ) / @bin_width ).to_i
            end
      if (bin<0) then bin=0 elsif (bin>@nbins) then bin=@nbins end

      classification = classify(report.query_id, h.target_id)
      case classification
      when :tp
        @tp[bin]  += 1
        @wtp[bin] += 1.0/@sf_size[@name2scopid[report.query_id].sf].to_f
      when :fp
        @fp[bin] += 1
        @wfp[bin] += 1.0/@sf_size[@name2scopid[report.query_id].sf].to_f
      when :uc
        @uc[bin] += 1
        @wuc[bin] += 1.0/@sf_size[@name2scopid[report.query_id].sf].to_f
      end

      h.classification = classification
      hits << h
      if classification == :fp
        @worst_fp << h 
      end
    end

    f.close
    return report.query_id
  end

  def process
    puts "Processing #{@resfiles.size} result files..." if @verbose
    i=0
    @resfiles.each do |resfile|
      hits = []
      query = parse_hits(resfile, hits)
      calc_and_append_rocx(query, hits) if @plots.include?(:rocx)

      i+=1
    end
    @rocx_scores = @rocx_scores.sort.reverse
  end

  def calc_and_append_rocx(query, hits)
    #total number of positives for given query
    pos = @name2scopid.keys.select {|k| relation(query,k)<@excl_relation }.inject(0) {|p,name| p += (classify(query, name)==:tp ? 1 : 0) }
    return if pos==0  #break if no homologs found

    #calculate ROC data
    fp_count=0
    tp_count=0
    sum=0
    hits.each do |h|
      if h.classification==:tp
        tp_count+=1
      elsif h.classification==:fp
        sum+=tp_count
        fp_count+=1
        break if fp_count>=@rocx
      end
    end
    @rocx_scores << (sum.to_f/(pos*@rocx).to_f)
  end

  def write_rocx_data
    x = []
    y = []
    tot = @rocx_scores.size.to_f
    @rocx_scores.each_index do |i|
      if (!x.empty? && x.last==@rocx_scores[i])
        y[-1] = (i+1).to_f/tot
      else
        x << @rocx_scores[i]
        y << (i+1).to_f/tot
      end
    end
    x.reverse!
    y.reverse!

    #write data to file
    datafile = File.join(@workdir, @name.empty? ? @benchfiles[:rocx] : "#{@name}_#{@benchfiles[:rocx]}")
    File.open(datafile, 'w') do |f|
      f.printf("%-15s  %-20s\n", "#ROCX", "fraction of queries")
      x.each_index {|i| f.printf("%-15.8g  %-15.8g\n", x[i], y[i]) }
    end
    puts "    "+datafile if @verbose
  end

  def write_tpfp_data(weighted=true)
    #calculate ROC data
    fp_count=0.0
    tp_count=0.0
    x = []
    y = []
    (@nbins).downto(0) do |bin|
      if weighted
        tp_count += @wtp[bin]
        fp_count += @wfp[bin]
      else
        tp_count += @tp[bin]
        fp_count += @fp[bin]
      end
      if (!x.empty? && x.last==fp_count)
        y[-1] = tp_count
      else
        x << fp_count
        y << tp_count
      end
    end
    #write data to file
    file = weighted ? @benchfiles[:wtpfp] : @benchfiles[:tpfp]
    datafile = File.join(@workdir, @name.empty? ? file: "#{@name}_#{file}")
    File.open(datafile, 'w') do |f|
      f.printf("%-15s  %-15s\n", "#FPs", "TPs")
      x.each_index {|i| f.printf("%-15.4g  %-15.4g\n", x[i], y[i]) }
    end
    puts "    "+datafile if @verbose
  end

  def write_fdr_data
    #calculate ROC data
    fp_count=0.0
    tp_count=0.0
    x = []
    y = []

    (@nbins).downto(0) do |bin|
      tp_count += @tp[bin]
      fp_count += @fp[bin]
      next if tp_count+fp_count==0
      if (!x.empty? && x.last==fp_count/(tp_count+fp_count))
        y[-1] = tp_count/@pos_tot
      else
        x << fp_count/(tp_count+fp_count)
        y << tp_count/@pos_tot
      end
    end
    #write data to file
    datafile = File.join(@workdir, @name.empty? ? @benchfiles[:fdr] : "#{@name}_#{@benchfiles[:fdr]}")
    File.open(datafile, 'w') do |f|
      f.printf("%-15s  %-15s\n", "#FDR", "sensitivity")
      x.each_index {|i| f.printf("%-15.8g  %-15.8g\n", x[i], y[i]) }
    end
    puts "    "+datafile if @verbose
  end

  def write_pvalue_data
    datafile = File.join(@workdir, @name.empty? ? @benchfiles[:pvalue] : "#{@name}_#{@benchfiles[:pvalue]}")

    File.open(datafile, 'w') do |f|
      fp_count=0
      f.printf("%-15s  %-15s\n", "#P-value rep", "P-value actual")
      (@nbins).downto(0) do |bin|
        fp_count += @fp[bin]
        pvalue_reported = @rank==:evalue ? pvalue(10.0**(-((bin.to_f*@bin_width)+@bin_min_evalue))) : (10.0**(-((bin.to_f*@bin_width)+@bin_min_pvalue)))
        pvalue_actual   = fp_count.to_f/@neg_tot.to_f
        f.printf("%-15.8g  %-15.8g\n", pvalue_reported, pvalue_actual)
      end
    end
    puts "    "+datafile if @verbose
  end

  def write_evalue_data
    datafile = File.join(@workdir, @name.empty? ? @benchfiles[:evalue] : "#{@name}_#{@benchfiles[:evalue]}")

    File.open(datafile, 'w') do |f|
      fp_count=0
      f.printf("%-15s  %-15s\n", "#E-value rep", "E-value actual")
      (@nbins).downto(0) do |bin|
        fp_count += @fp[bin]
        evalue_reported = @rank==:evalue ? 10.0**(-((bin.to_f*@bin_width)+@bin_min_evalue)) : evalue(10.0**(-((bin.to_f*@bin_width)+@bin_min_pvalue)))
        evalue_actual   = fp_count.to_f/@db_size.to_f
        f.printf("%-15.8g  %-15.8g\n", evalue_reported, evalue_actual)
      end
    end
    puts "    "+datafile if @verbose
  end

  def write_worst_false_positives()
    @worst_fp = @worst_fp.sort_by {|h| h.evalue }
    @worst_fp = @worst_fp[0 .. @nworst-1]

    File.open(@outfile, 'w') do |fout|
      worst_fp_sf = @worst_fp.map {|h| @name2scopid[h.query_id].sf }
      worst_sf = worst_fp_sf.uniq

      worst_sf_counts_unweighted = Hash.new
      worst_sf.each do |sf|
        worst_sf_counts_unweighted[sf] = 0
      end
      worst_fp_sf.each do |sf|
        worst_sf_counts_unweighted[sf] += 1
      end
      worst_sf_unweighted = worst_sf.sort_by { |sf| worst_sf_counts_unweighted[sf] }.reverse

      worst_sf_counts_weighted = Hash.new
      worst_sf.each do |sf|
        worst_sf_counts_weighted[sf] = worst_sf_counts_unweighted[sf].to_f / @sf_size[sf]
      end
      worst_sf_weighted = worst_sf.sort_by { |sf| worst_sf_counts_weighted[sf] }.reverse

      fout.puts("Worst superfamilies unweighted:")
      0.upto([worst_sf_unweighted.size, @nworst_fam].min - 1) do |i|
        sf = worst_sf_unweighted[i]
        fout.printf("%-8s  %8.2f\n", sf, worst_sf_counts_unweighted[sf])
      end
      fout.print "\n\n"

      fout.puts("Worst superfamilies weighted by superfamily size:")
      0.upto([worst_sf_weighted.size, @nworst_fam].min - 1) do |i|
        sf = worst_sf_weighted[i]
        fout.printf("%-8s  %8.2f\n", sf, worst_sf_counts_weighted[sf])
      end
      fout.print "\n\n"

      fout.puts("Worst FP hits sorted by E-value:")
      header_format_str = "%-4s  %-8s  %-8s  %-10s  %-10s  %-6s  %-7s  %-4s\n"
      row_format_str    = "%-4d  %-8s  %-8s  %-10s  %-10s  %-6i  %-7.2g  %4.2f\n"
      fout.printf(header_format_str, "No", "Query", "Hit", "Queryfam", "Hitfam", "Hit-No", "E-Value", "Weight")

      n = 1
      @worst_fp.each do |h|
        fout.printf(row_format_str, n, h.query_id, h.target_id, @name2scopid[h.query_id].fm,
                    @name2scopid[h.target_id].fm, h.num, h.evalue, 1.0 / @sf_size[@name2scopid[h.query_id].sf].to_f)
        n += 1
      end
    end
  end

  def relation(query, target)
    [query, target].each do |name|
      if @name2scopid[name].nil?
        $stderr.puts("No scop identifier for '#{name}' in sequence file!")
        exit(1)
      end
    end
    return query==target ? 5 : @name2scopid[query].relation(@name2scopid[target])
  end

  def classify(query, target)
    qsid = @name2scopid[query]
    tsid = @name2scopid[target]
    rel = relation(query, target)

    if rel<=@fp_relation
      if (qsid.to_s=~/^b\.(66|67|68|69|70)/ && tsid.to_s=~/^b\.(66|67|68|69|70)/)
        return :uc
      elsif (qsid.to_s=~/c\.(2|3|4|5|30|66|78|79|111)\./ && tsid.to_s=~/c\.(2|3|4|5|30|66|78|79|111)\./)
        return :uc
      elsif (qsid.to_s=~/i\./  || tsid.to_s=~/i\./ )
        return :uc
      else
        return :fp
      end
    elsif rel>=@tp_relation
      return :tp
    else
      return :uc
    end
  end

  def pvalue(eval,db_size=nil)
    db_size ||= @db_size
    1-Math.exp(-eval/db_size.to_f)
  end

  def evalue(pval,db_size=nil)
    db_size ||= @db_size
    Math.log(1.0-pval+1e-99)*(-@db_size)
  end

  def log10(a)
    Math.log10(a+1e-99)
  end

end

CSBin.new.run(ARGV)
